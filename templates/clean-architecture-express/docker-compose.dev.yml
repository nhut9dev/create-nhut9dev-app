# Development Docker Compose Configuration
# Usage: docker compose -f docker-compose.dev.yml up

services:
  # Application Development Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: ${PROJECT_NAME:-clean-arch-app}-dev
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    environment:
      - NODE_ENV=development
      - PORT=${PORT:-3000}
      - JWT_SECRET=${JWT_SECRET:-dev-secret-key}
      # Add your database connection string here
      # - DATABASE_URL=${DATABASE_URL}
    volumes:
      # Mount source code for hot reload
      - ./src:/app/src:delegated
      - ./nodemon.json:/app/nodemon.json:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      # Prevent node_modules from being overwritten
      - /app/node_modules
    # Uncomment and configure depends_on if you add a database service
    # depends_on:
    #   database:
    #     condition: service_healthy
    networks:
      - app-network
    # Optional: Debugging support
    # ports:
    #   - "9229:9229"  # Node.js debugger port
    # command: npm run dev:debug

  # ========================================
  # Database Services (optional - uncomment to use)
  # ========================================

  # MongoDB Example
  # mongodb:
  #   image: mongo:7-jammy
  #   container_name: ${PROJECT_NAME:-clean-arch}-mongodb-dev
  #   restart: unless-stopped
  #   ports:
  #     - "27017:27017"
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=${DB_USERNAME:-admin}
  #     - MONGO_INITDB_ROOT_PASSWORD=${DB_PASSWORD:-password}
  #     - MONGO_INITDB_DATABASE=${DB_NAME:-myapp}
  #   volumes:
  #     - mongodb_data:/data/db
  #   networks:
  #     - app-network

  # PostgreSQL Example
  # postgres:
  #   image: postgres:16-alpine
  #   container_name: ${PROJECT_NAME:-clean-arch}-postgres-dev
  #   restart: unless-stopped
  #   ports:
  #     - "5432:5432"
  #   environment:
  #     - POSTGRES_USER=${DB_USERNAME:-postgres}
  #     - POSTGRES_PASSWORD=${DB_PASSWORD:-password}
  #     - POSTGRES_DB=${DB_NAME:-myapp}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - app-network

  # MySQL Example
  # mysql:
  #   image: mysql:8
  #   container_name: ${PROJECT_NAME:-clean-arch}-mysql-dev
  #   restart: unless-stopped
  #   ports:
  #     - "3306:3306"
  #   environment:
  #     - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD:-rootpassword}
  #     - MYSQL_DATABASE=${DB_NAME:-myapp}
  #     - MYSQL_USER=${DB_USERNAME:-user}
  #     - MYSQL_PASSWORD=${DB_PASSWORD:-password}
  #   volumes:
  #     - mysql_data:/var/lib/mysql
  #   networks:
  #     - app-network

  # Redis Example (for caching)
  # redis:
  #   image: redis:7-alpine
  #   container_name: ${PROJECT_NAME:-clean-arch}-redis-dev
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - app-network

# Volumes (uncomment the section and volumes you need)
# volumes:
#   mongodb_data:
#     driver: local
#   postgres_data:
#     driver: local
#   mysql_data:
#     driver: local
#   redis_data:
#     driver: local

networks:
  app-network:
    driver: bridge
