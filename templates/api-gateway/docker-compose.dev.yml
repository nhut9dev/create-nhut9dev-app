# Development Docker Compose Configuration
# Usage: docker compose -f docker-compose.dev.yml up

services:
  # API Gateway Development Service
  gateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: ${PROJECT_NAME:-api-gateway}-dev
    restart: unless-stopped
    ports:
      - "${PORT:-8080}:${PORT:-8080}"
    environment:
      - NODE_ENV=development
      - PORT=${PORT:-8080}
      - JWT_SECRET=${JWT_SECRET:-dev-secret-key}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # Microservices URLs
      - USER_SERVICE_URL=${USER_SERVICE_URL:-http://localhost:3001}
      - PRODUCT_SERVICE_URL=${PRODUCT_SERVICE_URL:-http://localhost:3002}
      - ORDER_SERVICE_URL=${ORDER_SERVICE_URL:-http://localhost:3003}
    volumes:
      # Mount source code for hot reload
      - ./src:/app/src:delegated
      - ./nodemon.json:/app/nodemon.json:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      # Prevent node_modules from being overwritten
      - /app/node_modules
    depends_on:
      - redis
    networks:
      - gateway-network
    # Optional: Debugging support
    # ports:
    #   - "9229:9229"  # Node.js debugger port
    # command: npm run dev:debug

  # Redis Service (required for caching and rate limiting)
  redis:
    image: redis:7-alpine
    container_name: ${PROJECT_NAME:-api-gateway}-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - gateway-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  redis_data:
    driver: local

networks:
  gateway-network:
    driver: bridge
